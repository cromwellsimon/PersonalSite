@using System.Reflection

@code
{
	// I don't really care for using reflection with this but extension methods only redirect at compile-time unlike overrides which redirect at run-time.
	// This could be easily be done using a switch statement but it requires making the function and remembering to register it.
	public static RenderFragment? Render(IDetailCard inDetailCard)
	{
		MethodInfo? method = typeof(DetailCardStatics).RedirectExtensionMethod(inDetailCard.GetType(), nameof(Render));

		if (method != null)
		{
			return (RenderFragment)method.Invoke(null, [inDetailCard])!;
		}
		return null;
	}

	// public static RenderFragment? Render(IDetailCard inDetailCard) => inDetailCard switch
	// {
	// 	TextCard card => Render(card),
	// 	_ => null
	// };

	public static RenderFragment Render(TitleContentCard inTitleContentCard)
	{
		return
		@<div>
			<h1> @inTitleContentCard.Title </h1>
			<p> @inTitleContentCard.Content </p>
		</div>;
	}

	public static RenderFragment Render(TextCard inTextCard)
	{
		return
		@<div>
			<p> @inTextCard.Text </p>
		</div>;
	}
}
